#!/bin/bash

# MinecraftOS Server Installation Script
# This script downloads and installs a Minecraft server

# Exit on error
set -e

# Default values
SERVER_TYPE="paper"
MC_VERSION="1.19.2"
BUILD_VERSION="latest"
INSTALL_DIR="/opt/minecraft/servers/new-server"
MEMORY="2048"
PORT="25565"

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --type)
      SERVER_TYPE="$2"
      shift 2
      ;;
    --version)
      MC_VERSION="$2"
      shift 2
      ;;
    --build)
      BUILD_VERSION="$2"
      shift 2
      ;;
    --dir)
      INSTALL_DIR="$2"
      shift 2
      ;;
    --memory)
      MEMORY="$2"
      shift 2
      ;;
    --port)
      PORT="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

echo "====================================="
echo "MinecraftOS Server Installation"
echo "====================================="
echo "Server Type: $SERVER_TYPE"
echo "Minecraft Version: $MC_VERSION"
echo "Build Version: $BUILD_VERSION"
echo "Install Directory: $INSTALL_DIR"
echo "Memory: $MEMORY MB"
echo "Port: $PORT"
echo "====================================="

# Create installation directory
mkdir -p "$INSTALL_DIR"
mkdir -p "$INSTALL_DIR/logs"

# Download server jar based on type
echo "Downloading server files..."
cd "$INSTALL_DIR"

case $SERVER_TYPE in
  "vanilla")
    # Get version manifest
    echo "Fetching version manifest..."
    curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json > version_manifest.json
    
    # Get version details URL
    VERSION_URL=$(grep -o "\"$MC_VERSION\".*\"url\":\"[^\"]*\"" version_manifest.json | grep -o "https://.*json")
    
    if [ -z "$VERSION_URL" ]; then
      echo "Error: Could not find version $MC_VERSION"
      exit 1
    fi
    
    # Get server download URL
    echo "Fetching version details..."
    curl -s "$VERSION_URL" > version.json
    
    SERVER_URL=$(grep -o "\"server\".*\"url\":\"[^\"]*\"" version.json | grep -o "https://.*jar")
    
    if [ -z "$SERVER_URL" ]; then
      echo "Error: Could not find server download URL"
      exit 1
    fi
    
    # Download server
    echo "Downloading vanilla server..."
    curl -o server.jar "$SERVER_URL"
    ;;
    
  "paper")
    # Get latest build if not specified
    if [ "$BUILD_VERSION" = "latest" ]; then
      echo "Fetching latest build number..."
      BUILD_VERSION=$(curl -s "https://api.papermc.io/v2/projects/paper/versions/$MC_VERSION/builds" | 
                     grep -o '"build":[0-9]*' | grep -o '[0-9]*' | tail -1)
    fi
    
    # Download Paper
    echo "Downloading Paper server..."
    curl -o server.jar "https://api.papermc.io/v2/projects/paper/versions/$MC_VERSION/builds/$BUILD_VERSION/downloads/paper-$MC_VERSION-$BUILD_VERSION.jar"
    ;;
    
  "purpur")
    # Get latest build if not specified
    if [ "$BUILD_VERSION" = "latest" ]; then
      echo "Fetching latest build number..."
      BUILD_VERSION=$(curl -s "https://api.purpurmc.org/v2/purpur/$MC_VERSION" | 
                     grep -o '"latest":"[^"]*"' | cut -d'"' -f4)
    fi
    
    # Download Purpur
    echo "Downloading Purpur server..."
    curl -o server.jar "https://api.purpurmc.org/v2/purpur/$MC_VERSION/$BUILD_VERSION/download"
    ;;
    
  "fabric")
    # Download Fabric installer
    echo "Downloading Fabric installer..."
    curl -o fabric-installer.jar "https://maven.fabricmc.net/net/fabricmc/fabric-installer/0.11.0/fabric-installer-0.11.0.jar"
    
    # Run Fabric installer
    echo "Installing Fabric server..."
    java -jar fabric-installer.jar server -mcversion "$MC_VERSION" -downloadMinecraft
    
    # Rename server jar
    mv fabric-server-launch.jar server.jar
    
    # Clean up
    rm fabric-installer.jar
    ;;
    
  "forge")
    # Download Forge installer
    echo "Downloading Forge installer..."
    FORGE_URL="https://maven.minecraftforge.net/net/minecraftforge/forge/$MC_VERSION-$BUILD_VERSION/forge-$MC_VERSION-$BUILD_VERSION-installer.jar"
    curl -o forge-installer.jar "$FORGE_URL"
    
    # Run Forge installer
    echo "Installing Forge server..."
    java -jar forge-installer.jar --installServer
    
    # Rename server jar
    mv "forge-$MC_VERSION-$BUILD_VERSION-universal.jar" server.jar
    
    # Clean up
    rm forge-installer.jar
    ;;
    
  *)
    echo "Error: Unknown server type $SERVER_TYPE"
    exit 1
    ;;
esac

# Create server.properties
echo "Creating server.properties..."
cat > server.properties << EOF
# Minecraft server properties
# Generated by MinecraftOS
server-port=$PORT
gamemode=survival
difficulty=normal
spawn-protection=16
max-players=20
view-distance=10
enable-command-block=false
motd=A Minecraft Server
EOF

# Create eula.txt
echo "eula=true" > eula.txt

# Create server.json with configuration
echo "Creating server configuration..."
cat > server.json << EOF
{
  "id": "$(basename "$INSTALL_DIR")",
  "name": "$SERVER_TYPE-$MC_VERSION",
  "type": "$SERVER_TYPE",
  "version": "$MC_VERSION",
  "build": "$BUILD_VERSION",
  "jarFile": "server.jar",
  "memory": $MEMORY,
  "port": $PORT,
  "autoStart": false,
  "created": "$(date -Iseconds)"
}
EOF

# Create start script
echo "Creating start script..."
cat > start.sh << EOF
#!/bin/bash
java -Xmx${MEMORY}M -Xms$((MEMORY / 2))M -jar server.jar nogui
EOF
chmod +x start.sh

echo "====================================="
echo "Server installation complete!"
echo "====================================="
echo "Server installed at: $INSTALL_DIR"
echo "To start the server, run: cd $INSTALL_DIR && ./start.sh"
echo "Or use the MinecraftOS script: /opt/minecraft/scripts/start-server.sh $(basename "$INSTALL_DIR")"
echo "====================================="
